// node_modules/@analytics/google-analytics/lib/analytics-plugin-ga.browser.es.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var loadedInstances = {};
var gtagScriptSource = "https://www.googletagmanager.com/gtag/js";
var defaultGtagConf = {
  debug_mode: false,
  send_page_view: false,
  anonymize_ip: false,
  allow_google_signals: true,
  allow_ad_personalization_signals: true,
  cookie_flags: ""
};
var defaultConfig = {
  gtagName: "gtag",
  dataLayerName: "ga4DataLayer",
  measurementIds: [],
  gtagConfig: defaultGtagConf
};
function googleAnalytics() {
  var pluginConfig = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var pageCallCount = 0;
  var measurementIds = getIds(pluginConfig.measurementIds);
  var initConfig = _objectSpread(_objectSpread({}, defaultConfig), pluginConfig);
  return {
    name: "google-analytics",
    config: initConfig,
    initialize: function initialize(_ref) {
      var config = _ref.config, instance = _ref.instance;
      var dataLayerName = config.dataLayerName, customScriptSrc = config.customScriptSrc, gtagName = config.gtagName, gtagConfig = config.gtagConfig, debug = config.debug;
      var customLayerName = dataLayerName ? "&l=".concat(dataLayerName) : "";
      var src = customScriptSrc || "".concat(gtagScriptSource, "?id=").concat(measurementIds[0]).concat(customLayerName);
      if (!scriptLoaded(src)) {
        var script = document.createElement("script");
        script.async = true;
        script.src = src;
        document.body.appendChild(script);
      }
      if (!window[dataLayerName]) {
        window[dataLayerName] = window[dataLayerName] || [];
        window[gtagName] = function() {
          window[dataLayerName].push(arguments);
        };
        window[gtagName]("js", new Date());
      }
      var gtagConf = _objectSpread(_objectSpread({}, defaultGtagConf), gtagConfig ? gtagConfig : {});
      if (debug === true) {
        gtagConf.debug_mode = true;
      } else {
        delete gtagConf.debug_mode;
      }
      var user = instance.user() || {};
      var traits = user.traits || {};
      if (Object.keys(traits).length) {
        window[gtagName]("set", "user_properties", traits);
      }
      for (var i = 0; i < measurementIds.length; i++) {
        if (!loadedInstances[measurementIds[i]]) {
          window[gtagName]("config", measurementIds[i], gtagConf);
          loadedInstances[measurementIds[i]] = true;
        }
      }
    },
    identify: function identify(_ref2) {
      var payload = _ref2.payload, config = _ref2.config;
      var gtagName = config.gtagName;
      if (!window[gtagName] || !measurementIds.length)
        return;
      if (payload.userId) {
        window[gtagName]("set", {
          user_id: payload.userId
        });
      }
      if (Object.keys(payload.traits).length) {
        window[gtagName]("set", "user_properties", payload.traits);
      }
    },
    page: function page(_ref3) {
      var payload = _ref3.payload, config = _ref3.config, instance = _ref3.instance;
      var gtagName = config.gtagName, gtagConfig = config.gtagConfig;
      if (!window[gtagName] || !measurementIds.length)
        return;
      var properties = payload.properties;
      var send_to = properties.send_to;
      var campaign = instance.getState("context.campaign");
      var pageView = {
        page_title: properties.title,
        page_location: properties.url,
        page_path: properties.path || document.location.pathname,
        page_hash: properties.hash,
        page_search: properties.page_search,
        page_referrer: properties.referrer
      };
      var campaignData = addCampaignData(campaign);
      var finalPayload = _objectSpread(_objectSpread(_objectSpread({}, send_to ? {
        send_to
      } : {}), pageView), campaignData);
      if (gtagConfig && gtagConfig.send_page_view && pageCallCount === 0) {
        pageCallCount++;
        return;
      }
      window[gtagName]("event", "page_view", finalPayload);
      pageCallCount++;
    },
    track: function track(_ref4) {
      var payload = _ref4.payload, config = _ref4.config, instance = _ref4.instance;
      var properties = payload.properties, event = payload.event;
      var campaign = instance.getState("context.campaign");
      var gtagName = config.gtagName;
      if (!window[gtagName] || !measurementIds.length)
        return;
      var campaignData = addCampaignData(campaign);
      var finalPayload = _objectSpread(_objectSpread({}, properties), campaignData);
      window[gtagName]("event", event, finalPayload);
    },
    loaded: function loaded() {
      var dataLayerName = initConfig.dataLayerName, customScriptSrc = initConfig.customScriptSrc;
      var hasDataLayer = dataLayerName && window[dataLayerName] && Array.prototype.push === window[dataLayerName].push;
      return scriptLoaded(customScriptSrc || gtagScriptSource) && hasDataLayer;
    },
    methods: {
      addTag: function addTag(tagId) {
        var settings = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        if (window[initConfig.gtagName]) {
          window[initConfig.gtagName]("config", tagId, settings);
          if (measurementIds && !measurementIds.includes(tagId)) {
            measurementIds = measurementIds.concat(tagId);
          }
        }
      },
      disable: function disable(ids) {
        var gaIds = ids ? getIds(ids) : measurementIds;
        for (var i = 0; i < measurementIds.length; i++) {
          var gaId = measurementIds[i];
          if (gaIds.includes(gaId)) {
            window["ga-disable-".concat(gaId)] = true;
          }
        }
      },
      enable: function enable(ids) {
        var gaIds = ids ? getIds(ids) : measurementIds;
        for (var i = 0; i < measurementIds.length; i++) {
          var gaId = measurementIds[i];
          if (gaIds.includes(gaId)) {
            window["ga-disable-".concat(gaId)] = false;
          }
        }
      }
    }
  };
}
function getIds(measurementIds) {
  if (!measurementIds)
    throw new Error("No GA Measurement ID defined");
  if (Array.isArray(measurementIds)) {
    return measurementIds;
  }
  if (typeof measurementIds === "string") {
    return [measurementIds];
  }
  throw new Error("GA Measurement ID must be string or array of strings");
}
function addCampaignData() {
  var campaignData = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var campaign = {};
  var id = campaignData.id, name = campaignData.name, source = campaignData.source, medium = campaignData.medium, content = campaignData.content, keyword = campaignData.keyword;
  if (id)
    campaign.campaignId = id;
  if (name)
    campaign.campaignName = name;
  if (source)
    campaign.campaignSource = source;
  if (medium)
    campaign.campaignMedium = medium;
  if (content)
    campaign.campaignContent = content;
  if (keyword)
    campaign.campaignKeyword = keyword;
  return campaign;
}
function scriptLoaded(scriptSrc) {
  var scripts = document.querySelectorAll("script[src]");
  var regex = new RegExp("^".concat(scriptSrc));
  return Boolean(Object.values(scripts).filter(function(value) {
    return regex.test(value.src);
  }).length);
}
var index = googleAnalytics;
var init = googleAnalytics;

// dep:@analytics_google-analytics
var analytics_google_analytics_default = index;
export {
  analytics_google_analytics_default as default,
  init
};
//# sourceMappingURL=@analytics_google-analytics.js.map
